#!/usr/bin/env python
import ratslam
import sys
import time
import os, os.path
from numpy import *
from matplotlib.pylab import *
#import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D


def draw_position(x, y):
    scatter(x,y)

def draw_x_y_z(pcmax, xcoord, ycoord, thcoord, subplot):
    ax3 = Axes3D(gcf(), rect=subplot.get_position())
    ax3.scatter(xcoord, ycoord, thcoord, 'z')
    ax3.set_xlim3d([0, 61])
    ax3.set_ylim3d([0, 61])
    ax3.set_zlim3d([0, 36])


def main(): 
    # TODO use argparse
    video_path = sys.argv[1]
    output_path = sys.argv[2]

    wait_for_key = False

    image_source = ratslam.VideoSource(video_path, grayscale=True)

    driver = ratslam.RatSLAM(image_source)
 
    xcoord = []
    ycoord = []
    thcoord = []
    
    last_time = time.time()
    
    ########################################################################
    for i in xrange(21000):
        
        # option to quit/break cleanly
        if wait_for_key:
            print "Press key to continue to next image or 'q' to quit"
            input = raw_input()
            if input == 'q':
                break
        
        # do a time step of the simulation
        driver.evolve()
        
        # query some values for plotting
        im = driver.current_image
        emap = driver.experience_map
        pcmax = driver.current_pose_cell
        odo = driver.current_odo
        exp_id = driver.exp_id
        
        xcoord.append(pcmax[0])
        ycoord.append(pcmax[1])
        thcoord.append(pcmax[2])

        if i % 5 == 0:
            print "Plotting..."
            subplot(2,2,1)
            imshow(im, cmap=cm.gray)
            a=gca()
            a.axis('off')
            title('Raw Image')
        
            subplot(2,2,2)
            draw_position(odo[0], odo[1])
            b = gca()
            title('Raw Odometry')
            #b.set_xlim([-50, 100])
            #b.set_ylim([0, 125])
        
            pcdata = subplot(2,2,3)
            draw_x_y_z(pcmax, xcoord, ycoord, thcoord, pcdata)
            title('Pose Cell Activity')
            pcdata.axis('off')
        
            subplot(2,2,4)
            draw_position(emap.exps[exp_id].x_m, emap.exps[exp_id].y_m)
            title('Experience Map')
            d = gca()
            #d.set_xlim([-50, 100])
            #d.set_ylim([0, 120])
            savefig(os.path.join(output_path, 'output%06i.png' % i))

        now = time.time()
        fps = 1.0 / (now - last_time)
        last_time = now
        print "Using frames %i and %i (%f fps)" % (i, i+1, fps)

############################################################################

if __name__ == "__main__":
    main()
